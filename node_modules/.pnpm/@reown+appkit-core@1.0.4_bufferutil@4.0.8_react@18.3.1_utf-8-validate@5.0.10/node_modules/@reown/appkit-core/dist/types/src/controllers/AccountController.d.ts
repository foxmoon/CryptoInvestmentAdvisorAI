import type { AccountType, CombinedProvider, ConnectedWalletInfo, Provider, SocialProvider } from '../utils/TypeUtil.js';
import type { CaipAddress, ChainNamespace } from '@reown/appkit-common';
import type { Balance } from '@reown/appkit-common';
import type { W3mFrameTypes } from '@reown/appkit-wallet';
import type UniversalProvider from '@walletconnect/universal-provider';
export interface AccountControllerState {
    currentTab: number;
    caipAddress?: CaipAddress;
    address?: string;
    addressLabels: Map<string, string>;
    allAccounts: AccountType[];
    balance?: string;
    balanceSymbol?: string;
    profileName?: string | null;
    profileImage?: string | null;
    addressExplorerUrl?: string;
    smartAccountDeployed?: boolean;
    socialProvider?: SocialProvider;
    tokenBalance?: Balance[];
    shouldUpdateToAddress?: string;
    connectedWalletInfo?: ConnectedWalletInfo;
    preferredAccountType?: W3mFrameTypes.AccountType;
    socialWindow?: Window;
    farcasterUrl?: string;
    provider?: UniversalProvider | Provider | CombinedProvider;
    status?: 'reconnecting' | 'connected' | 'disconnected' | 'connecting';
    siweStatus?: 'uninitialized' | 'ready' | 'loading' | 'success' | 'rejected' | 'error';
}
export declare const AccountController: {
    state: AccountControllerState;
    replaceState(newState: AccountControllerState | undefined): void;
    subscribe(callback: (val: AccountControllerState) => void): () => void;
    subscribeKey<K extends keyof AccountControllerState>(property: K, callback: (val: AccountControllerState[K]) => void, chain?: ChainNamespace): () => void;
    setStatus(status: AccountControllerState['status'], chain: ChainNamespace | undefined): void;
    getCaipAddress(chain: ChainNamespace | undefined): `eip155:${string}:${string}` | `eip155:${number}:${string}` | `solana:${string}:${string}` | `solana:${number}:${string}` | `polkadot:${string}:${string}` | `polkadot:${number}:${string}` | undefined;
    setProvider(provider: AccountControllerState['provider'], chain: ChainNamespace | undefined): void;
    setCaipAddress(caipAddress: AccountControllerState['caipAddress'], chain: ChainNamespace | undefined): void;
    setBalance(balance: AccountControllerState['balance'], balanceSymbol: AccountControllerState['balanceSymbol'], chain: ChainNamespace): void;
    setProfileName(profileName: AccountControllerState['profileName'], chain: ChainNamespace): void;
    setProfileImage(profileImage: AccountControllerState['profileImage'], chain?: ChainNamespace): void;
    setAddressExplorerUrl(explorerUrl: AccountControllerState['addressExplorerUrl'], chain: ChainNamespace | undefined): void;
    setSmartAccountDeployed(isDeployed: boolean, chain: ChainNamespace | undefined): void;
    setCurrentTab(currentTab: AccountControllerState['currentTab']): void;
    setTokenBalance(tokenBalance: AccountControllerState['tokenBalance'], chain: ChainNamespace | undefined): void;
    setShouldUpdateToAddress(address: string, chain: ChainNamespace | undefined): void;
    setAllAccounts(accounts: AccountType[], chain: ChainNamespace | undefined): void;
    addAddressLabel(address: string, label: string, chain: ChainNamespace | undefined): void;
    removeAddressLabel(address: string, chain: ChainNamespace | undefined): void;
    setConnectedWalletInfo(connectedWalletInfo: AccountControllerState['connectedWalletInfo'], chain: ChainNamespace): void;
    setPreferredAccountType(preferredAccountType: AccountControllerState['preferredAccountType'], chain: ChainNamespace): void;
    setSocialProvider(socialProvider: AccountControllerState['socialProvider'], chain: ChainNamespace | undefined): void;
    setSocialWindow(socialWindow: AccountControllerState['socialWindow'], chain: ChainNamespace | undefined): void;
    setFarcasterUrl(farcasterUrl: AccountControllerState['farcasterUrl'], chain: ChainNamespace | undefined): void;
    fetchTokenBalance(): Promise<void>;
    resetAccount(chain: ChainNamespace): void;
    setSiweStatus(status: AccountControllerState['siweStatus']): void;
};

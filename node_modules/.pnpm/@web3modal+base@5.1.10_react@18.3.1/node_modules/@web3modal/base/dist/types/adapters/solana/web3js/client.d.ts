import { Connection } from '@solana/web3.js';
import type { BaseWalletAdapter } from '@solana/wallet-adapter-base';
import { type Commitment, type ConnectionConfig } from '@solana/web3.js';
import type { ConnectionControllerClient, NetworkControllerClient, Token, CaipNetwork, ChainAdapter } from '@web3modal/core';
import type { Chain as AvailableChain } from '@web3modal/common';
import type { ProviderType, Chain, Provider, SolStoreUtilState } from '@web3modal/scaffold-utils/solana';
import type { AppKit } from '../../../src/client.js';
import type { AppKitOptions } from '../../../utils/TypesUtil.js';
import type { OptionsControllerState } from '@web3modal/core';
export interface Web3ModalClientOptions extends Omit<AppKitOptions, 'defaultChain' | 'tokens' | 'sdkType' | 'sdkVersion'> {
    solanaConfig: ProviderType;
    chains: Chain[];
    connectionSettings?: Commitment | ConnectionConfig;
    defaultChain?: Chain;
    chainImages?: Record<number | string, string>;
    connectorImages?: Record<string, string>;
    tokens?: Record<number, Token>;
    wallets?: BaseWalletAdapter[];
}
export type Web3ModalOptions = Omit<Web3ModalClientOptions, '_sdkVersion' | 'isUniversalProvider'>;
export declare class SolanaWeb3JsClient implements ChainAdapter<SolStoreUtilState, CaipNetwork> {
    private appKit;
    private instanceOptions;
    options: AppKitOptions | undefined;
    private hasSyncedConnectedAccount;
    private chains;
    chain: AvailableChain;
    networkControllerClient: NetworkControllerClient;
    connectionControllerClient: ConnectionControllerClient;
    connectionSettings: Commitment | ConnectionConfig;
    private availableProviders;
    private provider;
    defaultChain: CaipNetwork;
    constructor(options: Web3ModalClientOptions);
    construct(appKit: AppKit, options: OptionsControllerState): void;
    disconnect(): Promise<void>;
    getAddress(): string | undefined;
    getWalletProvider(): Provider | undefined;
    getWalletProviderType(): import("@web3modal/core").ConnectorType | undefined;
    getWalletConnection(): Connection | null;
    private syncConnectedWalletInfo;
    private syncAccount;
    private syncBalance;
    private syncRequestedNetworks;
    switchNetwork(caipNetwork: CaipNetwork): Promise<void>;
    private syncNetwork;
    subscribeProvider(callback: (newState: SolStoreUtilState) => void): () => void;
    private setProvider;
    private watchProvider;
    private getProvider;
    private initializeProviders;
    private addProvider;
    private syncConnectors;
}

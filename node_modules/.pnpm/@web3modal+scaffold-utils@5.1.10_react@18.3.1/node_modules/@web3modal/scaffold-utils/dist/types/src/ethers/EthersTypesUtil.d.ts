import type { W3mFrameProvider } from '@web3modal/wallet';
import type { ProviderInterface } from '@coinbase/wallet-sdk';
import type { SocialProvider } from '../TypeUtil.js';
export interface IEthersConfig {
    providers: ProviderType;
    defaultChain?: number;
    SSR?: boolean;
}
export type Address = `0x${string}`;
export type ProviderType = {
    injected?: Provider;
    coinbase?: ProviderInterface;
    auth?: {
        email?: boolean;
        socials?: SocialProvider[];
        showWallets?: boolean;
        walletFeatures?: boolean;
    };
    EIP6963?: boolean;
    metadata: Metadata;
};
export interface RequestArguments {
    readonly method: string;
    readonly params?: readonly unknown[] | object;
}
type ProviderEventListener = {
    connect: (connectParams: {
        chainId: number;
    }) => void;
    disconnect: (error: Error) => void;
    chainChanged: (chainId: string) => void;
    accountsChanged: (accounts: string[]) => void;
    message: (message: {
        type: string;
        data: unknown;
    }) => void;
};
export interface Provider {
    request: <T>(args: RequestArguments) => Promise<T>;
    on<T extends keyof ProviderEventListener>(event: T, listener: ProviderEventListener[T]): void;
    removeListener: <T>(event: string, listener: (data: T) => void) => void;
    emit: (event: string) => void;
}
export type Metadata = {
    name: string;
    description: string;
    url: string;
    icons: string[];
};
export type CombinedProvider = W3mFrameProvider & Provider;
export type Chain = {
    rpcUrl: string;
    explorerUrl: string;
    currency: string;
    name: string;
    chainId: number;
};
export {};
